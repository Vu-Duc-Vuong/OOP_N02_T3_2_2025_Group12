#!/bin/bash

echo "================================================"
echo "üîß BUILD - X√ÇY D·ª∞NG PROJECT"
echo "================================================"
echo ""

# Function ki·ªÉm tra Java
check_java() {
    echo "‚òï Ki·ªÉm tra Java..."
    if java -version >/dev/null 2>&1; then
        echo "‚úÖ Java ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
        java -version
    else
        echo "‚ùå Java kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y"
        echo "üí° Vui l√≤ng c√†i ƒë·∫∑t Java 11+ v√† th√™m v√†o PATH"
        exit 1
    fi
}

# Build Spring Boot application
build_spring_boot() {
    echo ""
    echo "üèóÔ∏è  Building Spring Boot Application..."
    echo "======================================="
    
    cd ../../gs-serving-web-content-main/complete
    
    if [ ! -f "pom.xml" ]; then
        echo "‚ùå Kh√¥ng t√¨m th·∫•y pom.xml"
        exit 1
    fi
    
    echo "üìÅ Th∆∞ m·ª•c hi·ªán t·∫°i: $(pwd)"
    echo "üîß C·∫•p quy·ªÅn th·ª±c thi cho Maven Wrapper..."
    chmod +x mvnw
    
    echo "üì¶ Cleaning previous build..."
    ./mvnw clean
    
    echo "üî® Compiling and packaging..."
    ./mvnw compile package -DskipTests
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Spring Boot build th√†nh c√¥ng!"
        echo "üì¶ JAR file: target/serving-web-content-complete-0.0.1-SNAPSHOT.jar"
    else
        echo "‚ùå Spring Boot build th·∫•t b·∫°i!"
        exit 1
    fi
    
    cd - > /dev/null
}

# Build Java QuanLy module
build_quan_ly() {
    echo ""
    echo "üèóÔ∏è  Building QuanLy Module..."
    echo "============================="
    
    cd ../../QuanLy/src
    
    echo "üìÅ Th∆∞ m·ª•c hi·ªán t·∫°i: $(pwd)"
    echo "üßπ D·ªçn d·∫πp c√°c file .class c≈©..."
    find . -name "*.class" -delete 2>/dev/null
    
    echo "üî® Compiling Java files..."
    
    # Compile Model classes first
    echo "üìù Compiling Model classes..."
    javac Model/*.java
    if [ $? -ne 0 ]; then
        echo "‚ùå Compilation failed for Model classes"
        cd - > /dev/null
        exit 1
    fi
    
    # Compile main classes
    echo "üìù Compiling main classes..."
    javac -cp . *.java
    if [ $? -ne 0 ]; then
        echo "‚ùå Compilation failed for main classes"
        cd - > /dev/null
        exit 1
    fi
    
    echo "‚úÖ QuanLy module build th√†nh c√¥ng!"
    echo "üìã C√°c class files ƒë√£ ƒë∆∞·ª£c t·∫°o:"
    find . -name "*.class" | sort
    
    cd - > /dev/null
}

# Build test files
build_tests() {
    echo ""
    echo "üèóÔ∏è  Building Test Files..."
    echo "=========================="
    
    cd ../../test
    
    echo "üìÅ Th∆∞ m·ª•c hi·ªán t·∫°i: $(pwd)"
    echo "üßπ D·ªçn d·∫πp c√°c file .class c≈©..."
    find . -name "*.class" -delete 2>/dev/null
    
    echo "üî® Compiling test files..."
    javac -cp .:../QuanLy/src *.java
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Test files build th√†nh c√¥ng!"
        echo "üìã C√°c test class files:"
        find . -name "*.class" | sort
    else
        echo "‚ùå Test files build th·∫•t b·∫°i!"
        cd - > /dev/null
        exit 1
    fi
    
    cd - > /dev/null
}

# Show build summary
show_summary() {
    echo ""
    echo "üìä BUILD SUMMARY"
    echo "================"
    echo ""
    
    # Spring Boot JAR
    if [ -f "gs-serving-web-content-main/complete/target/serving-web-content-complete-0.0.1-SNAPSHOT.jar" ]; then
        echo "‚úÖ Spring Boot JAR: C√≥ s·∫µn"
        ls -lh gs-serving-web-content-main/complete/target/*.jar
    else
        echo "‚ùå Spring Boot JAR: Kh√¥ng t·ªìn t·∫°i"
    fi
    
    echo ""
    
    # QuanLy classes
    quan_ly_classes=$(find QuanLy/src -name "*.class" 2>/dev/null | wc -l)
    echo "üìù QuanLy classes: $quan_ly_classes files"
    
    # Test classes
    test_classes=$(find test -name "*.class" 2>/dev/null | wc -l)
    echo "üß™ Test classes: $test_classes files"
    
    echo ""
    echo "üéØ ƒê·ªÉ ch·∫°y ·ª©ng d·ª•ng, s·ª≠ d·ª•ng: ./start.sh"
    echo "üß™ ƒê·ªÉ ch·∫°y tests, s·ª≠ d·ª•ng: ./test.sh"
}

# Menu ch√≠nh
main_menu() {
    echo "Ch·ªçn lo·∫°i build:"
    echo "1. Build Spring Boot Application"
    echo "2. Build QuanLy Module"
    echo "3. Build Test Files"
    echo "4. Build t·∫•t c·∫£"
    echo "5. Hi·ªÉn th·ªã build summary"
    echo "0. Tho√°t"
    echo ""
    
    read -p "Nh·∫≠p l·ª±a ch·ªçn (0-5): " choice
    
    case $choice in
        1) 
            check_java
            build_spring_boot
            ;;
        2) 
            check_java
            build_quan_ly
            ;;
        3) 
            check_java
            build_tests
            ;;
        4) 
            check_java
            build_spring_boot
            build_quan_ly
            build_tests
            show_summary
            ;;
        5) 
            show_summary
            ;;
        0) 
            echo "üëã Tho√°t build"
            exit 0
            ;;
        *) 
            echo "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá"
            main_menu
            ;;
    esac
}

# N·∫øu c√≥ tham s·ªë, ch·∫°y tr·ª±c ti·∫øp
if [ $# -gt 0 ]; then
    check_java
    case $1 in
        "spring"|"springboot") build_spring_boot ;;
        "quanly") build_quan_ly ;;
        "test") build_tests ;;
        "all") 
            build_spring_boot
            build_quan_ly
            build_tests
            show_summary
            ;;
        "summary") show_summary ;;
        *) 
            echo "‚ùå Tham s·ªë kh√¥ng h·ª£p l·ªá: $1"
            echo "S·ª≠ d·ª•ng: ./build.sh [spring|quanly|test|all|summary]"
            ;;
    esac
else
    check_java
    main_menu
fi

echo ""
echo "‚ú® Build process ho√†n t·∫•t!"
