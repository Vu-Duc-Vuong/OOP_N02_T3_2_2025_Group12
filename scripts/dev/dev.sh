#!/bin/bash

echo "================================================"
echo "üîÑ DEVELOPMENT - C√îNG C·ª§ PH√ÅT TRI·ªÇN"
echo "================================================"
echo ""

# Function ƒë·ªÉ theo d√µi file changes
watch_files() {
    echo "üëÄ Theo d√µi thay ƒë·ªïi files..."
    echo "Ctrl+C ƒë·ªÉ d·ª´ng"
    echo ""
    
    # S·ª≠ d·ª•ng inotifywait n·∫øu c√≥, kh√¥ng th√¨ fallback to find
    if command -v inotifywait >/dev/null 2>&1; then
        echo "üì° S·ª≠ d·ª•ng inotifywait ƒë·ªÉ theo d√µi..."
        inotifywait -m -r -e modify --format '%w%f' \
            --include='.*\.(java|html|css|js|properties)$' \
            ../../gs-serving-web-content-main/complete/src/ ../../QuanLy/src/ ../../test/ 2>/dev/null | \
        while read file; do
            echo "üîÑ File changed: $file"
            echo "üí° Ch·∫°y ./build.sh ƒë·ªÉ rebuild"
        done
    else
        echo "‚ö†Ô∏è  inotifywait kh√¥ng c√≥ s·∫µn, s·ª≠ d·ª•ng polling..."
        local last_check=$(date +%s)
        while true; do
            local changed_files=$(find ../../gs-serving-web-content-main/complete/src/ ../../QuanLy/src/ ../../test/ \
                -name "*.java" -o -name "*.html" -o -name "*.css" -o -name "*.js" -o -name "*.properties" \
                -newer /tmp/dev_watch_${last_check} 2>/dev/null)
            
            if [ -n "$changed_files" ]; then
                echo "üîÑ Files changed:"
                echo "$changed_files" | sed 's/^/  /'
                echo "üí° Ch·∫°y ./build.sh ƒë·ªÉ rebuild"
                last_check=$(date +%s)
                touch /tmp/dev_watch_${last_check}
            fi
            
            sleep 2
        done
    fi
}

# Auto rebuild when files change
auto_rebuild() {
    echo "üîÑ Auto-rebuild mode..."
    echo "S·∫Ω t·ª± ƒë·ªông rebuild khi c√≥ file thay ƒë·ªïi"
    echo "Ctrl+C ƒë·ªÉ d·ª´ng"
    echo ""
    
    # Create initial timestamp
    local timestamp=$(date +%s)
    touch /tmp/auto_rebuild_${timestamp}
    
    while true; do
        # Check for Java file changes
        local changed_java=$(find ../../QuanLy/src/ ../../test/ -name "*.java" -newer /tmp/auto_rebuild_${timestamp} 2>/dev/null)
        local changed_spring=$(find ../../gs-serving-web-content-main/complete/src/ -name "*.java" -newer /tmp/auto_rebuild_${timestamp} 2>/dev/null)
        
        if [ -n "$changed_java" ] || [ -n "$changed_spring" ]; then
            echo "üîÑ Detected changes, rebuilding..."
            
            if [ -n "$changed_java" ]; then
                echo "üìù Rebuilding QuanLy..."
                ./build.sh quanly >/dev/null 2>&1
            fi
            
            if [ -n "$changed_spring" ]; then
                echo "üå± Rebuilding Spring Boot..."
                ./build.sh spring >/dev/null 2>&1
            fi
            
            echo "‚úÖ Rebuild completed at $(date)"
            timestamp=$(date +%s)
            touch /tmp/auto_rebuild_${timestamp}
        fi
        
        sleep 3
    done
}

# Development server v·ªõi hot reload
dev_server() {
    echo "üå± Starting Development Server..."
    echo "================================="
    
    # Build tr∆∞·ªõc
    echo "üèóÔ∏è  Initial build..."
    ./build.sh all >/dev/null 2>&1
    
    cd ../../gs-serving-web-content-main/complete
    
    echo "üöÄ Starting Spring Boot in dev mode..."
    echo "üì± Access: http://localhost:8080"
    echo "üîÑ Changes to templates/static files will be hot-reloaded"
    echo ""
    
    # Spring Boot dev mode v·ªõi hot reload
    ./mvnw spring-boot:run -Dspring-boot.run.jvmArguments="-Dspring.devtools.restart.enabled=true"
    
    cd - > /dev/null
}

# Code quality check
quality_check() {
    echo "üîç Code Quality Check..."
    echo "========================"
    
    local issues=0
    
    echo "üìù Checking Java code style..."
    
    # Check for common issues
    echo "üîç Ki·ªÉm tra naming conventions..."
    if grep -r "class [a-z]" ../../QuanLy/src/ ../../test/ 2>/dev/null; then
        echo "‚ö†Ô∏è  Found lowercase class names"
        issues=$((issues + 1))
    fi
    
    echo "üîç Ki·ªÉm tra imports kh√¥ng s·ª≠ d·ª•ng..."
    local unused_imports=$(grep -r "^import " ../../QuanLy/src/ ../../test/ 2>/dev/null | \
        awk -F: '{print $2}' | sort | uniq -c | awk '$1 == 1 {print $2}' | wc -l)
    if [ $unused_imports -gt 0 ]; then
        echo "‚ö†Ô∏è  Found $unused_imports potentially unused imports"
        issues=$((issues + 1))
    fi
    
    echo "üîç Ki·ªÉm tra code duplication..."
    # Simple check for duplicate lines
    local duplicates=$(find ../../QuanLy/src/ ../../test/ -name "*.java" -exec cat {} \; | \
        grep -v "^$" | grep -v "^//" | sort | uniq -d | wc -l)
    if [ $duplicates -gt 5 ]; then
        echo "‚ö†Ô∏è  Found potential code duplication"
        issues=$((issues + 1))
    fi
    
    echo ""
    if [ $issues -eq 0 ]; then
        echo "‚úÖ Code quality: GOOD"
    else
        echo "‚ö†Ô∏è  Code quality: $issues issues found"
    fi
    
    return $issues
}

# Generate documentation
generate_docs() {
    echo "üìö Generating Documentation..."
    echo "=============================="
    
    local docs_dir="docs"
    mkdir -p "$docs_dir"
    
    echo "üìù Generating Java docs..."
    
    # Generate simple documentation
    cat > "$docs_dir/API.md" << 'EOF'
# API Documentation

## QuanLy Classes

### HangHoa
- Qu·∫£n l√Ω th√¥ng tin h√†ng h√≥a
- Properties: m√£ h√†ng, t√™n h√†ng, gi√°, s·ªë l∆∞·ª£ng

### QuanLyHangHoa
- Qu·∫£n l√Ω danh s√°ch h√†ng h√≥a
- Methods: th√™m, s·ª≠a, x√≥a, t√¨m ki·∫øm

### QuanLyBan
- Qu·∫£n l√Ω b√°n h√†ng
- Methods: t·∫°o h√≥a ƒë∆°n, t√≠nh t·ªïng

### QuanLyNhap
- Qu·∫£n l√Ω nh·∫≠p h√†ng
- Methods: nh·∫≠p h√†ng, c·∫≠p nh·∫≠t t·ªìn kho

## Spring Boot Endpoints

### GET /
- Trang ch·ªß ·ª©ng d·ª•ng

### GET /greeting
- Trang ch√†o m·ª´ng
- Parameters: name (optional)

EOF

    echo "üìä Generating project statistics..."
    
    cat > "$docs_dir/STATS.md" << EOF
# Project Statistics

Generated on: $(date)

## File Counts
- Java files: $(find . -name "*.java" | wc -l)
- HTML files: $(find . -name "*.html" | wc -l)
- CSS files: $(find . -name "*.css" | wc -l)
- JS files: $(find . -name "*.js" | wc -l)

## Lines of Code
- Java: $(find . -name "*.java" -exec cat {} \; | wc -l)
- HTML: $(find . -name "*.html" -exec cat {} \; | wc -l)

## Test Coverage
- Test files: $(find ../../test/ -name "Test*.java" 2>/dev/null | wc -l)

EOF

    echo "‚úÖ Documentation generated in $docs_dir/"
    ls -la "$docs_dir/"
}

# Performance test
performance_test() {
    echo "‚ö° Performance Test..."
    echo "====================="
    
    echo "üîç Testing Spring Boot startup time..."
    
    cd ../../gs-serving-web-content-main/complete
    
    # Time the startup
    local start_time=$(date +%s)
    timeout 30s ./mvnw spring-boot:run -Dspring-boot.run.arguments="--server.port=0" >/dev/null 2>&1 &
    local pid=$!
    
    # Wait for startup or timeout
    sleep 10
    kill $pid 2>/dev/null
    
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    echo "‚è±Ô∏è  Startup time: ~${duration}s"
    
    if [ $duration -lt 15 ]; then
        echo "‚úÖ Performance: GOOD"
    elif [ $duration -lt 30 ]; then
        echo "‚ö†Ô∏è  Performance: ACCEPTABLE"
    else
        echo "‚ùå Performance: SLOW"
    fi
    
    cd - > /dev/null
}

# Menu ch√≠nh
main_menu() {
    echo "Ch·ªçn c√¥ng c·ª• development:"
    echo "1. Watch files (theo d√µi thay ƒë·ªïi)"
    echo "2. Auto-rebuild (t·ª± ƒë·ªông build khi c√≥ thay ƒë·ªïi)"
    echo "3. Development server (hot reload)"
    echo "4. Code quality check"
    echo "5. Generate documentation"
    echo "6. Performance test"
    echo "0. Tho√°t"
    echo ""
    
    read -p "Nh·∫≠p l·ª±a ch·ªçn (0-6): " choice
    
    case $choice in
        1) watch_files ;;
        2) auto_rebuild ;;
        3) dev_server ;;
        4) quality_check ;;
        5) generate_docs ;;
        6) performance_test ;;
        0) 
            echo "üëã Tho√°t development tools"
            exit 0
            ;;
        *) 
            echo "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá"
            main_menu
            ;;
    esac
}

# N·∫øu c√≥ tham s·ªë, ch·∫°y tr·ª±c ti·∫øp
if [ $# -gt 0 ]; then
    case $1 in
        "watch") watch_files ;;
        "auto-rebuild") auto_rebuild ;;
        "dev-server") dev_server ;;
        "quality") quality_check ;;
        "docs") generate_docs ;;
        "performance") performance_test ;;
        *) 
            echo "‚ùå Tham s·ªë kh√¥ng h·ª£p l·ªá: $1"
            echo "S·ª≠ d·ª•ng: ./dev.sh [watch|auto-rebuild|dev-server|quality|docs|performance]"
            ;;
    esac
else
    main_menu
fi

echo ""
echo "‚ú® Development tools ho√†n t·∫•t!"
