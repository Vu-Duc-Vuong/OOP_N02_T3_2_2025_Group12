#!/bin/bash

# ================================================
# üéØ PROJECT MANAGER - QU·∫¢N L√ù PROJECT
# ================================================
# Script ch√≠nh ƒë·ªÉ qu·∫£n l√Ω t·∫•t c·∫£ c√°c c√¥ng c·ª• project

VERSION="1.0.0"
PROJECT_NAME="Qu·∫£n L√Ω H√†ng H√≥a - Group10"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function ƒë·ªÉ hi·ªÉn th·ªã banner
show_banner() {
    echo -e "${BLUE}================================================${NC}"
    echo -e "${CYAN}üéØ $PROJECT_NAME${NC}"
    echo -e "${BLUE}================================================${NC}"
    echo -e "${YELLOW}Version: $VERSION${NC}"
    echo -e "${PURPLE}Team: Group10 - OOP_N02_T3_2_2025${NC}"
    echo ""
}

# Function ƒë·ªÉ hi·ªÉn th·ªã menu ch√≠nh
show_main_menu() {
    echo -e "${GREEN}üìã MENU CH√çNH${NC}"
    echo -e "${GREEN}==============${NC}"
    echo ""
    echo -e "${CYAN}üöÄ KH·ªûI ƒê·ªòNG & CH·∫†Y:${NC}"
    echo "  s, start          - Kh·ªüi ƒë·ªông Spring Boot application"
    echo "  q, quick          - Quick start (setup + kh·ªüi ƒë·ªông nhanh)"
    echo ""
    echo -e "${CYAN}üîß BUILD & TEST:${NC}"
    echo "  b, build          - Build project"
    echo "  t, test           - Ch·∫°y tests"
    echo "  c, check          - Ki·ªÉm tra h·ªá th·ªëng & m√¥i tr∆∞·ªùng"
    echo ""
    echo -e "${CYAN}üßπ B·∫¢O TR√å:${NC}"
    echo "  clean, cleanup    - D·ªçn d·∫πp project"
    echo "  dev               - Development tools"
    echo ""
    echo -e "${CYAN}üìñ TR·ª¢ GI√öP:${NC}"
    echo "  h, help           - H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"
    echo "  v, version        - Th√¥ng tin version"
    echo "  status            - Tr·∫°ng th√°i project"
    echo ""
    echo -e "${CYAN}üéõÔ∏è  KH√ÅC:${NC}"
    echo "  menu              - Hi·ªÉn th·ªã menu n√†y"
    echo "  exit, quit        - Tho√°t"
    echo ""
}

# Function ƒë·ªÉ hi·ªÉn th·ªã status
show_status() {
    echo -e "${GREEN}üìä TR·∫†NG TH√ÅI PROJECT${NC}"
    echo -e "${GREEN}====================${NC}"
    echo ""
    
    # Java status
    if java -version >/dev/null 2>&1; then
        echo -e "‚òï Java: ${GREEN}‚úÖ Available${NC}"
    else
        echo -e "‚òï Java: ${RED}‚ùå Missing${NC}"
    fi
    
    # Build status
    if [ -f "gs-serving-web-content-main/complete/target/serving-web-content-complete-0.0.1-SNAPSHOT.jar" ]; then
        echo -e "üì¶ Spring Boot JAR: ${GREEN}‚úÖ Built${NC}"
    else
        echo -e "üì¶ Spring Boot JAR: ${YELLOW}‚ö†Ô∏è  Not built${NC}"
    fi
    
    # QuanLy classes
    local quanly_classes=$(find QuanLy/src -name "*.class" 2>/dev/null | wc -l)
    if [ $quanly_classes -gt 0 ]; then
        echo -e "üìù QuanLy Classes: ${GREEN}‚úÖ $quanly_classes compiled${NC}"
    else
        echo -e "üìù QuanLy Classes: ${YELLOW}‚ö†Ô∏è  Not compiled${NC}"
    fi
    
    # Test classes
    local test_classes=$(find test -name "*.class" 2>/dev/null | wc -l)
    if [ $test_classes -gt 0 ]; then
        echo -e "üß™ Test Classes: ${GREEN}‚úÖ $test_classes compiled${NC}"
    else
        echo -e "üß™ Test Classes: ${YELLOW}‚ö†Ô∏è  Not compiled${NC}"
    fi
    
    # Port status
    if netstat -tuln 2>/dev/null | grep -q ":8080 " || ss -tuln 2>/dev/null | grep -q ":8080 "; then
        echo -e "üåê Port 8080: ${YELLOW}‚ö†Ô∏è  In use${NC}"
    else
        echo -e "üåê Port 8080: ${GREEN}‚úÖ Available${NC}"
    fi
    
    echo ""
}

# Function ƒë·ªÉ hi·ªÉn th·ªã help
show_help() {
    echo -e "${GREEN}üìñ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG${NC}"
    echo -e "${GREEN}===================${NC}"
    echo ""
    echo -e "${CYAN}üöÄ KH·ªûI ƒê·ªòNG:${NC}"
    echo "  ./start.sh          - Kh·ªüi ƒë·ªông ·ª©ng d·ª•ng"
    echo "  ./quick-start.sh    - Kh·ªüi ƒë·ªông nhanh"
    echo "  ./project.sh start  - Kh·ªüi ƒë·ªông qua menu"
    echo ""
    echo -e "${CYAN}üîß BUILD & TEST:${NC}"
    echo "  ./project.sh build  - Build project"
    echo "  ./project.sh test   - Ch·∫°y tests"
    echo ""
    echo -e "${CYAN}üåê TRUY C·∫¨P:${NC}"
    echo "  URL: http://localhost:8080"
    echo ""
    echo -e "${CYAN}‚ö° NHANH:${NC}"
    echo "  chmod +x *.sh && ./start.sh"
    echo ""
}

# Function ƒë·ªÉ x·ª≠ l√Ω commands
handle_command() {
    local cmd="$1"
    
    case "$cmd" in
        's'|'start')
            echo -e "${GREEN}üöÄ Kh·ªüi ƒë·ªông ·ª©ng d·ª•ng...${NC}"
            ./start.sh
            ;;
                'q'|'quick')
            echo -e "${GREEN}‚ö° Quick start...${NC}"
            ./quick-start.sh
            ;;
        "b"|"build")
        "q"|"quick")
            echo -e "${CYAN}‚ö° Quick start...${NC}"
            ./scripts/utils/quick-start.sh
            ;;
        "b"|"build")
            echo -e "${CYAN}üèóÔ∏è  Building project...${NC}"
            cd gs-serving-web-content-main/complete && ./mvnw clean package -DskipTests
            ;;
        "t"|"test")
            echo -e "${CYAN}üß™ Running tests...${NC}"
            cd gs-serving-web-content-main/complete && ./mvnw test
            ;;
        "c"|"check")
            echo -e "${CYAN}üîç Checking system...${NC}"
            java -version
            echo ""
            echo "Maven Wrapper status:"
            ls -la gs-serving-web-content-main/complete/mvnw
            ;;
        "clean"|"cleanup")
            echo -e "${CYAN}üßπ Cleaning up...${NC}"
            cd gs-serving-web-content-main/complete && ./mvnw clean
            ;;
        "dev")
            echo -e "${CYAN}üîß Development tools...${NC}"
            cd gs-serving-web-content-main/complete && ./mvnw spring-boot:run -Dspring-boot.run.profiles=dev
            ;;
        "h"|"help")
            echo -e "${CYAN}üìñ Help...${NC}"
            show_help
            ;;
        "v"|"version")
            echo -e "${GREEN}üìã PROJECT INFO${NC}"
            echo -e "${GREEN}===============${NC}"
            echo "Project: $PROJECT_NAME"
            echo "Version: $VERSION"
            echo "Scripts version: $(date +'%Y.%m.%d')"
            echo ""
            java -version 2>&1 | head -1
            ;;
        "status")
            show_status
            ;;
        "menu")
            show_main_menu
            ;;
        "exit"|"quit")
            echo -e "${GREEN}üëã T·∫°m bi·ªát!${NC}"
            exit 0
            ;;
        "")
            # Empty command, do nothing
            ;;
        *)
            echo -e "${RED}‚ùå L·ªánh kh√¥ng h·ª£p l·ªá: $cmd${NC}"
            echo -e "${YELLOW}üí° G√µ 'menu' ƒë·ªÉ xem danh s√°ch l·ªánh${NC}"
            echo -e "${YELLOW}üí° G√µ 'help' ƒë·ªÉ xem h∆∞·ªõng d·∫´n chi ti·∫øt${NC}"
            ;;
    esac
}

# Interactive mode
interactive_mode() {
    echo -e "${GREEN}üéÆ INTERACTIVE MODE${NC}"
    echo -e "${GREEN}===================${NC}"
    echo -e "${YELLOW}G√µ l·ªánh ho·∫∑c 'menu' ƒë·ªÉ xem danh s√°ch l·ªánh${NC}"
    echo -e "${YELLOW}G√µ 'exit' ƒë·ªÉ tho√°t${NC}"
    echo ""
    
    while true; do
        echo -ne "${BLUE}project> ${NC}"
        read -r command
        echo ""
        handle_command "$command"
        echo ""
    done
}

# Main execution
main() {
    # Change to project directory
    cd "$(dirname "$0")"
    
    show_banner
    
    # N·∫øu c√≥ tham s·ªë, th·ª±c hi·ªán l·ªánh tr·ª±c ti·∫øp
    if [ $# -gt 0 ]; then
        handle_command "$1"
    else
        # Hi·ªÉn th·ªã menu v√† v√†o interactive mode
        show_main_menu
        interactive_mode
    fi
}

# Ch·∫°y main function
main "$@"
